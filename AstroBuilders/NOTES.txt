Postulats
================================================
On peut "tout" gérer depuis l'application smartphone !
Il n'y a pas d'application web.
Il y a par contre un backoffice web mais il n'est là que pour le stockage et le partage des infos.
Il n'y a pas d'interface utilisateur de gestion.

Ca implique que lorsqu'il faut ajouter une image, elle soit présente sur le smartphone !
On peut toujours se l'envoyer par email...

L'application est (sera) disponible sur iPhone et Android, smartphone ET tablette.
Il est envisageable (normalement relativement facilement) d'avoir la version Windows Phone ET desktop 8.1 ... voir Windows 10...
Mais je traiterais ces versions un peu plus tard... je manque de temps :)



* Fiche Country
================================================
- code pays : FRA / BEL / USA
url drapeau construite (propriété Flag) : /Content/Country/FRA.png

Stockage sur le site web dans /Content/Country
Image en .png
http://flagpedia.net pour récupération des images
https://countrycode.org pour les codes sur 3 lettres

liste des pays : http://r2builders.diverstrucs.com/Country

Gestion manuel par #superadmin.



* Fiche club
================================================
L'application connait "l'ensemble" des clubs/associations.
Un club c'est :
- un url complète vers le logo
- un nom

Stockage sur le site web dans /Content/Clubs
Image en .png avec transparence.

liste des clubs: http://r2builders.diverstrucs.com/Club

Gestion manuel par #superadmin.



* Fiche user
================================================
Un user contient :
- nom prénom (optionnel)
- nickname (Unique en base)
- login (unique en base)
- password
- email (optionnel, sert à re-générer un mot de passe perdu) Obligatoire pour recevoir des droits !
- pays (peut être différent de celui du club, un club n'ayant pas de pays)
- liste des clubs suivi pour les actus
(géré automatiquement)
- date de création du compte
- date de dernier login
- nombre de login
- id de push android/ios/windows
- token de connexion (change à chaque connexion => si utilise plusieurs device, il faut se reconnecter !!! )
et en optionnel
- id Builder
- id club d'appartenance
- liste des droits

Un #admin peut désigner un #user comme étant un #new #builder #modo.
Le #user gagne alors des droits dans l'application.
1 user = 0 ou 1 club
1 user = 0 ou 1 builder (donc 1 club)

Il n'y a pas de page web qui permette de récupérer la liste des users => pas de hack possible :)
Il existe par contre un service data qui permet, à partir d'un token d'admin, de récupérer la liste des users du pays correspondant à l'admin.



* Fiche builder
================================================
Une fiche builder contient :
- nom prénom réel
- nickname
- adresse email
- lieu d'origine
- lien vers page facebook
- lien vers blog
- lien vers l'image de l'avatar
- un texte descriptif long
- liste des fiches robots appartenant au builder

- un code pays (pour affichage du drapeau correspondant)
- club d'appartenance (pour l'instant que nous...) <= automatique par l'admin qui promeut le "user" en "builder"

- id iBeacon


Une fiche builder est créée automatiquement lors de l'affectation du droit #builder par un #admin.

Liste des builders: http://r2builders.diverstrucs.com/Builder
Visu de la fiche d'un builders : http://r2builders.diverstrucs.com/Builder/NickName => http://r2builders.diverstrucs.com/Builder/Boris
Sur le web, un QR-Code est affiché. Ce QR-Code contient l'url de la page web du Builders.


* Fiche robot
================================================
Chaque Builders peut créer des fiches robot.

- id iBeacon



* Actualités
================================================
Pour le moment, on va uniquement se concentrer sur les sorties événements de nos robots.
Quand vous êtes sûr qu'un événement va avoir lieu, vous pouvez alors créer une actualité.
Une actualité comporte :
- un titre
- un descriptif (indiquez notamment la date de l'événement, ou la période ainsi que le lieu)
- une date d'affichage (Si la date est une date future, l'actualité n'est pas affichée sur l'application)
- le club pour lequel l'actu est créée (automatiquement affecté au club du builder qui crée l'actu)
- le builder qui a créé l'actu
L'actualité apparaît alors sur la page d'accueil de l'application. 

Travail d'un builder qui participe à un événement :
- faire une actu pour dire que l'on va participer à "tel" événement, dès que l'on est certain de la participation.
- faire une actu pour le jour J, une actu du genre : "Aujourd'hui, les R2 Builders sont au salon xxx".

Liste des actus : http://r2builders.diverstrucs.com/ (page d'accueil du site web)



* Fiche exhibition
================================================
Chaque builder peut participer à des events. Il a donc le droit de créer un event/exhibition. (event est un mot clé de C#)
Détail d'une exhibition :
- nom
- date de début
- date de fin (peut être la même que début)
- descriptif
- un logo (optionnel)
- une image (optionnel)
- id builder de celui qui crée l'event
- list<id builder> liste des builders participants



* Fiche carte => Gamification
================================================
Une carte est une image que l'utilisateur gagne quand il a découvert un "truc".
Techniquement, "truc" pouvant être un QR-Code ou une détection de iBeacon.
De manière physique, placer un iBeacon :
- sur le stand des builders
- dans chacun des robots 
- sur chacun des builders (dans la poche)

On peut prévoir d'en déposer sur d'autres stands mais aussi d'en équiper des "stars". (Anthony Daniels, Kenny Baker, Marcus, ...)
Plus économique : avoir également des QR-Code que l'on peut lire dans l'application et qui débloque la carte correspondante.
>> Prévoir dans l'application de pouvoir scanner un QR-Code.
>> Faire un design affiche pour le QR-Code

Pour un "truc" ayant un iBeacon, le QR-Code est auto généré à partir de l'ID event + ID iBeacon.
Pour les autres sans iBeacon, c'est auto-généré sur base de l'ID event + random.

Une carte :
- ID event (une carte appartient obligatoirement à un event)
- ID iBeacon
- distance iBeacon pour validation (en centimètres. Au dessus de cette distance, l'image n'est pas débloquée)
- QR-Code
- nom
- image à débloquer
optionnel
- ID Builder => permet de voir les cartes depuis la fiche du builder
- ID Robot => permet de voir les cartes depuis la fiche du robot

Les builders gèrent les cartes de chaque event. Pas de gestion fine des droits pour le moment !
>> Faire un design des cartes. Je vois ça sur le principe des cartes Topps. 
	C'est à dire que l'on a un masque que l'on vient appliquer sur les images gagnées.
	Par défaut on les affiche "caché" (genre une ombre de R2)
	Toutes les images sont verticales !

On crée une carte directement depuis l'application smartphone. On prend une photo, on donne un nom, on
approche le iBeacon sur le smartphone, on décide de la distance de découverte, on valide le tout et c'est envoyé sur le serveur.
Distance de découverte : c'est de l'approximation ! Plus c'est proche, plus c'est précis... C'est de la radio... Ca n'aime
pas l'eau (les ondes sont absorbées). Le corps humain est rempli d'eau... Le iBeacon dans un R2 sera souvent dans une cage de
Faraday ou perturbé par l'électronique embarquée.
Proposition pour commencer : distance de détection de 100 cm et on affinera au fur et à mesure de nos tests !
Après, je n'ai pas forcément envie que tout le monde vienne se coller à moi pour que ça fonctionne :)
Non, je ne connais pas le sexe du porteur de Smartphone et ne peut pas adapter le distance en fonction de... !!!

On peut alors prévoir des cadeaux à offrir à ceux qui ont tout découvert. (sticker, pins, ...)
Il faut "griller" le téléphone pour qu'il ne puisse avoir qu'un seul cadeau.
Genre : le smartphone affiche un qr-code que le builders scanne. Si ça n'existe pas
sur le serveur, le gain est validé et on mémorise le qr-code sur le serveur. Si ça
existe déjà, le builder signale que le cadeau a déjà été remis.

Guidelines:
Pour la carte du stand Builders : mettre une photo du stand.
Pour la carte d'un robot : mettre une photo du robot de l'event.
Pour la carte d'un builder : mettre une photo du builder sur l'event.

Entrée de menu "Mes cartes"
Sur cet écran, par défaut il n'y a "rien". Juste un bouton qui permet de scanner des QR-Code.
Dès que l'appli a découvert un iBeacon, une entrée avec l'event apparait. On peut alors cliquer sur l'event
et voir toutes les cartes à découvrir (en mode caché)
Au fur et à mesure des découvertes (proximité à moins d'1 mètre), les cartes se découvrent.
Si on a scanné un QR-Code valide, l'entrée avec l'event apparait et on peut alors cliquer sur l'event.
On voit toutes les cartes à découvrir en mode caché + celle que l'on a scanné.

Si l'utilisateur n'est pas anonyme, tout ce qui est découvert par l'utilisateur est sauvegardé sur le serveur pour cet utilisateur.
S'il utilise un autre smartphone, une fois connecté, il récupère ce qu'il a déjà découvert.



* Droits
================================================
0/ anonyme
Visu complète de l'appli.
Peut avoir des succès, etc...
Mais tout ceci n'est pas sauvegardé en dehors du smartphone !

1/ Un compte nouvellement créé est un utilisateur de base. 
Aucun droit supplémentaire dans l'application.
Par contre, sauvegarde des infos dans le "cloud".
Infos = succès obtenus, robots vus, etc...

2/ DROIT news
Permet à un utilisateur de gérer ses propres actualités (pour le club auquel il appartient).
- peut créer des actualités (voir la rubrique idoine).
à ne donner qu'à un membre du club (uniquement les adhérents ?)

3/ DROIT builder
Permet d'avoir une fiche builder.
Permet de créer et gérer des fiches robots.
- une fiche builder a renseigner.
- zéro à n fiches robots, une fiche par robot. Aucune limite sur le nombre de fiches.

4/ DROIT modo
Permet de gérer les actus de tout le monde, pour son club.
Un #modo est "modo" pour son club et n'a l'autorité que sur son club.

5/ DROIT admin
Permet de donner des droits à un utilisateur.
Le #newser et #builder est automatiquement affecté au club de l'admin.
Un #admin est "admin" pour son club et n'a l'autorité que sur son club.

6/ un "superadmin" peut désigner un #builder comme #admin.
La gestion des #superadmin est manuelle et à la discrétion du comité de l'association.
Un #superadmin l'est pour l'ensemble des clubs.




* Services data
================================================
Les communications du service data sont cryptées AES avec un salt changeant à chaque requête.
Ca n'est pas top secure mais c'est déjà pas mal :)
(pas forcément exhaustif)
- Urls utilisées SANS token : (donne l'info en cryptée)
http://r2builders.diverstrucs.com/Data/Clubs
/Data/Country
/Data/News
/Data/Builders
- Urls utilisées AVEC token : (ne font rien si les bons paramètres ne sont pas fournis et sont valides)
http://r2builders.diverstrucs.com/Data/Users
/Data/UpdateBuilderUser
/Data/CreateUser
/Data/CheckUser
/Data/UpdateUser
/Data/UpdateBuilder
/Data/CreateExhibition
/Data/DeleteExhibition
/Data/UpdateExhibition
/Data/CreateCard
/Data/DeleteCard
/Data/UpdateCard



Besoins graphique
================================================
Les icones de menu :
- les actualités : donne accès à la liste des actus du club
- les builders : donne accès à la liste des builders du club
- les robots : donne accès à la liste des robots du club
- les événements : donne accès à la liste des salons ù il y a le club
- mes cartes : accès au contenu gagné lors de la rencontre avec un builder, un robot, un stand, ...
- lire un QR-Code : permet de décoder un QR-Code et de débloquer des cartes
- mon compte : création/modification de compte, connection à son compte
- à propos de : affiche les conditions d'utilisation (+ 2-3 infos techniques)

- ma fiche : permet à un builder de gérer sa fiche de présentation de builder
- mes robots : permet à un builder de gérer la fiche de présentation de chacun de ses robots
- mes sorties : permet la création/modification de salons et permet de s'inscrire à un salon
- mes actus : permet de gérer des actus

- les actus : permet à un modo de gérer l'ensemble des actus
- les users : permet à un modo de gérer les users => promotion d'un compte en builder, nomination d'un modo, ...



TODO :
================================================

Un utilisateur choisit les actualités de clubs il veut voir. Par défaut il a une vision de l'ensemble des actualités.
Il coche/décoche la liste des actualités de clubs qu'il veut suivre.

Les droits par club
Les droits par event, s'inscrire à un event, gestion des cartes à découvrir...

>> Communiquer sur l'application pour dire qu'elle existe et expliquer à quoi elle sert ! Une grande affiche sur le stand ???

iBeacon on Android
exhibitions
cards
game iBeacon / Cards



TRADUCTION
================================================
Traduction de l'application.
Faire en sorte que l'app soit multi-langue. Par défaut en anglais ?
L'utilisateur choisit sa langue... mais où dans l'interface ?

Comment gère-t-on la langue du contenu ? 
Charge à celui qui crée le contenu de le mettre dans sa langue + autre ?
exemple :
Geekopolis 2015
C'est aujourd'hui et c'est maintenant ! / It's today and it is now!

ou uniquement dans la langue du pays de l'event ?
Belgique : belge + flamand ? Pas français du coup ?


Package Nuget
================================================
Liste des plugins
https://github.com/xamarin/plugins

https://github.com/aarnott/pclcrypto => Andrew Arnott
https://github.com/EgorBo/Toasts.Forms.Plugin => EgorBo
https://github.com/jamesmontemagno/Xamarin.Plugins/tree/master/Vibrate
https://github.com/jamesmontemagno/Xamarin.Plugins/tree/master/Settings
https://github.com/jamesmontemagno/Xamarin.Plugins/tree/master/DeviceInfo
https://github.com/chrisriesgo/Android-AltBeacon-Library (AndroidAltBeaconLibrary)
https://github.com/jamesmontemagno/Xamarin.Plugins/tree/master/Media

web:
http://zxingnet.codeplex.com => Michael Jahn



base64Picture = Convert.ToBase64String(File.ReadAllBytes(jpgFilename));



To add a new object
================================================
1/ create object class in AstroBuildersModel
2/ create manager for the object in Managers.cs
eventualy add some methods here.

3/ projet AstroWeb, declare manager in Helper.cs
4/ add CreateFolder (Allxxxxx.FolderName); and Allxxxxxx.SaveFile += SaveFile;
5/ add loader in ReloadData
6/ add data services in Controller Data
Several controls have to be done here! Security!!! (token is good? user is authorize? data are valid?)
Services to add: all, create, delete, update ...

7/ project AstroBuilders (forms), declare manager in Global.cs
8/ add loader
			IDataServer xxxx = new IDataServer ("exhibitions", true);
			xxxx.DataRefresh +=  delegate(bool status) {
				System.Diagnostics.Debug.WriteLine("Status: " + xxxx.FileName + "=" + status);
				if(!status)
					return;
				AllExhibitions.LoadFromJson(Helper.Decrypt(xxxx.JsonData));
			};
			DataServer.AddToDo (xxxx);
9/ add call to data services in Tools.cs

10/ add page(s) to view the object, create, delete, update, ...
Integrity controls have to be done before calling data services ;)
